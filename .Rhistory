# y density plot
ydensity <- ggplot(data = my_df
,aes(x = log10(mean_expr_s_l_active+1))
)+
geom_density()+
xlim(c(0,max_value))+
xlab("")+
geom_vline(xintercept = threshold_log10_meanexpr_per_condition
, color = "red")+
theme(text = element_text(size=0))+
ggtitle("")+
coord_flip()+
theme_bw()+
theme(plot.margin = unit(c(0.5, 1, 2.5, 2), "cm"))
# main plot
QC_plot <- ggplot(data = my_df
,aes(x = log10(mean_expr_r_r_active+1)
,y = log10(mean_expr_s_l_active+1)
,color = passed_discrepancy_threshold
,shape = passed_discrepancy_threshold
)
)+
geom_point(alpha = 0.5
#,show.legend = FALSE
)+
scale_color_manual(labels = c("FALSE"="failed threshold in\nboth conditions"
, "TRUE"="passed threshold in\nat least one condition")
,values=c("FALSE"="gray80"
,"TRUE"="black")
,guide = guide_legend()
)+
scale_shape_manual(labels = c("FALSE"="failed threshold in\nboth conditions"
, "TRUE"="passed threshold in\nat least one condition")
,values=c("FALSE"=16,"TRUE"=1)
,guide = guide_legend()
)+
ggtitle(condition)+
ylim(c(0,max_value))+
xlim(c(0,max_value))+
xlab("receptor in receiving cell type\n[log10 mean expression]")+
ylab("ligand in sending cell type\n[log10 mean expression]")+
geom_vline(xintercept = threshold_log10_meanexpr_per_condition
, color = "red")+
geom_hline(yintercept = threshold_log10_meanexpr_per_condition
, color = "red")+
theme_bw()+
theme(text = element_text(size=20)
,legend.position="bottom"
,legend.title=element_blank()
)
#guides(color = guide_legend(label.position = "bottom")
#       ,shape = guide_legend(label.position = "bottom")
#      )+
# x density plot
xdensity <- ggplot(data = my_df
,aes(x = log10(mean_expr_r_r_active+1)))+
geom_density()+
xlim(c(0,max_value))+
xlab("")+
geom_vline(xintercept = threshold_log10_meanexpr_per_condition
, color = "red")+
theme(text = element_text(size=0))+
ggtitle("")+
theme_bw()+
theme(plot.margin = unit(c(0, 0, 1.8, 0), "cm"))
# Create a blank placeholder plot :
blankPlot <- ggplot(data = df
,aes(x = log10_cum_weight
,y = log10_cum_weight
)
)+
geom_jitter(alpha=0) +
theme(axis.line=element_blank()
,plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
my_l <- list(ydensity=ydensity
,QC_plot=QC_plot
,blankPlot=blankPlot
,xdensity=xdensity
)
ggsave("ydensity_plot.png", plot = ydensity, width = 10, height = 8, dpi = 300)
ggsave("QC_plot.png", plot = QC_plot, width = 10, height = 8, dpi = 300)
ggsave("blankPlot.png", plot = blankPlot, width = 10, height = 8, dpi = 300)
ggsave("xdensity_plot.png", plot = xdensity, width = 10, height = 8, dpi = 300)
})
grid.arrange(plot_list[[1]][["ydensity"]]
,plot_list[[1]][["QC_plot"]]
,plot_list[[2]][["ydensity"]]
,plot_list[[2]][["QC_plot"]]
,plot_list[[1]][["blankPlot"]]
,plot_list[[1]][["xdensity"]]
,plot_list[[2]][["blankPlot"]]
,plot_list[[2]][["xdensity"]]
,nrow = 2
,ncol = 4
,widths=c(2, 6, 2, 6)
,heights=c(6.5, 1.5)
,top=textGrob("log10 mean expression in active fraction"
,gp = gpar(fontsize = 24))
)
}
interactions <- filterInteractions(comm_result = interactions
,threshold_frac_samples_per_condition = threshold_frac_samples_per_condition
,threshold_log10_cum_weight = threshold_log10_cum_weight
,threshold_log10_meanexpr_per_condition = threshold_log10_meanexpr_per_condition
)
plot_list
library(grid)
library(gridExtra)
library(gtable)
filterInteractions <- function(comm_result, threshold_log10_cum_weight = 0.05, threshold_frac_samples_per_condition = 0.8,
threshold_log10_meanexpr_per_condition = 0.1, verbose = TRUE) {
# plot the distribution of log10 cumulative interactions weight over the
# fraction of samples in which the interactions is expressed
# calculate log10 cumulative interactions weights
comm_result$anno_interactions$log10_cum_weight <- log10(rowSums(comm_result$weights) + 1)
# identify control samples
idx_control <- comm_result$anno_samples$case_or_control == "control"
idx_case <- comm_result$anno_samples$case_or_control == "case"
# calculate the fraction of samples expressing the interactions
comm_result$anno_interactions$frac_samples_controls <- rowSums(comm_result$weights[,idx_control] != 0) / sum(idx_control)
comm_result$anno_interactions$frac_samples_cases <- rowSums(comm_result$weights[,idx_case] != 0) / sum(idx_case)
# set thresholds
comm_result$thresholds$threshold_log10_cum_weight <- threshold_log10_cum_weight
comm_result$thresholds$threshold_frac_samples_per_condition = threshold_frac_samples_per_condition
comm_result$thresholds$threshold_log10_meanexpr_per_condition = threshold_log10_meanexpr_per_condition
cumW <- plot_cumW(df = comm_result$anno_interactions, threshold_log10_cum_weight = threshold_log10_cum_weight)
fracSamp <- plot_fracSamples(df = comm_result$anno_interactions, threshold_frac_samples_per_condition = threshold_frac_samples_per_condition)
p <- arrangeGrob(fracSamp$ydensity
,fracSamp$QC_plot
,fracSamp$blankPlot
,fracSamp$xdensity
,ncol=2
,nrow=2
,widths=c(2.5, 5.5)
,heights=c(6.5, 1.5)
)
ggsave("above_plot2.png", plot = p, width = 10, height = 8, dpi = 300)
# arrange plots
grid.arrange(cumW
, p
, ncol=2
, widths = c(3.5,4.5)
)
ggsave("above_plot1.png", plot = cumW, width = 10, height = 8, dpi = 300)
plotMeanLigVSMeanRec(comm_result$anno_interactions, threshold_log10_meanexpr_per_condition = threshold_log10_meanexpr_per_condition)
# filter interactions which did not pass the threshold in any sample
comm_result$anno_interactions$passed_log10_cum_weight_filter <- comm_result$anno_interactions$log10_cum_weight >
threshold_log10_cum_weight
comm_result$anno_interactions$passed_frac_samples_filter <- (comm_result$anno_interactions$frac_samples_controls >
threshold_frac_samples_per_condition) | (comm_result$anno_interactions$frac_samples_cases > threshold_frac_samples_per_condition)
comm_result$anno_interactions$passed_log10_meanexpr_control_filter <- (log10(comm_result$anno_interactions$mean_e_s_l_control +
1) > threshold_log10_meanexpr_per_condition) & (log10(comm_result$anno_interactions$mean_e_r_r_control +
1) > threshold_log10_meanexpr_per_condition)
comm_result$anno_interactions$passed_log10_meanexpr_case_filter <- (log10(comm_result$anno_interactions$mean_e_s_l_case +
1) > threshold_log10_meanexpr_per_condition) & (log10(comm_result$anno_interactions$mean_e_r_r_case +
1) > threshold_log10_meanexpr_per_condition)
comm_result$anno_interactions$passed_log10_meanexpr_per_condition_filter <- comm_result$anno_interactions$passed_log10_meanexpr_control_filter |
comm_result$anno_interactions$passed_log10_meanexpr_case_filter
# filter anno_interactions
comm_result$anno_interactions$passed_QC_filter <- (comm_result$anno_interactions$passed_log10_cum_weight_filter &
comm_result$anno_interactions$passed_frac_samples_filter & comm_result$anno_interactions$passed_log10_meanexpr_per_condition_filter)
samples <- names(comm_result$per_sample_anno_interactions)
if (verbose) {
print(paste(sum(!(comm_result$anno_interactions$passed_log10_cum_weight_filter & comm_result$anno_interactions$passed_frac_samples_filter)),
"out of", nrow(comm_result$weights), "interactions do not pass the thresholds for log10 cumulative interactions weight >",
threshold_log10_cum_weight, "and fraction of expressing samples >", threshold_frac_samples_per_condition,
". Also ", sum(!comm_result$anno_interactions$passed_log10_meanexpr_per_condition_filter),
" interactions didn't pass the discrepancy filter.", " In total,", sum(!comm_result$anno_interactions$passed_QC_filter),
" bad quality interactions will be removed and", sum(comm_result$anno_interactions$passed_QC_filter),
"good quality interactions will remain."))
}
return(comm_result)
}
plotMeanLigvsMeanRec <- function(df,threshold_log10_meanexpr_per_condition = 0.1
){
max_value <- log10(max(df[,c("mean_e_s_l_control"
,"mean_e_s_l_case"
,"mean_e_r_r_control"
,"mean_e_r_r_case")]
,na.rm=TRUE)+1)
df$passed_discrepancy_threshold_control <- (log10(df$mean_e_s_l_control+1) > threshold_log10_meanexpr_per_condition) & (
log10(df$mean_e_r_r_control+1) > threshold_log10_meanexpr_per_condition)
df$passed_discrepancy_threshold_case <- (log10(df$mean_e_s_l_case+1) > threshold_log10_meanexpr_per_condition) & (
log10(df$mean_e_r_r_case+1) > threshold_log10_meanexpr_per_condition)
df$passed_discrepancy_threshold <- df$passed_discrepancy_threshold_control | df$passed_discrepancy_threshold_case
plot_list <- lapply(c("control"
,"case")
,function(condition){
ifelse(condition == "control"
,{my_df <- data.frame(interaction_ID = df$interaction_ID
,mean_expr_s_l_active = df$mean_e_s_l_control
,mean_expr_r_r_active = df$mean_e_r_r_control
,passed_discrepancy_threshold = df$passed_discrepancy_threshold
)
}
,{my_df <- data.frame(interaction_ID = df$interaction_ID
,mean_expr_s_l_active = df$mean_e_s_l_case
,mean_expr_r_r_active = df$mean_e_r_r_case
,passed_discrepancy_threshold = df$passed_discrepancy_threshold
)
}
)
# y density plot
ydensity <- ggplot(data = my_df
,aes(x = log10(mean_expr_s_l_active+1))
)+
geom_density()+
xlim(c(0,max_value))+
xlab("")+
geom_vline(xintercept = threshold_log10_meanexpr_per_condition
, color = "red")+
theme(text = element_text(size=0))+
ggtitle("")+
coord_flip()+
theme_bw()+
theme(plot.margin = unit(c(0.5, 1, 2.5, 2), "cm"))
# main plot
QC_plot <- ggplot(data = my_df
,aes(x = log10(mean_expr_r_r_active+1)
,y = log10(mean_expr_s_l_active+1)
,color = passed_discrepancy_threshold
,shape = passed_discrepancy_threshold
)
)+
geom_point(alpha = 0.5
#,show.legend = FALSE
)+
scale_color_manual(labels = c("FALSE"="failed threshold in\nboth conditions"
, "TRUE"="passed threshold in\nat least one condition")
,values=c("FALSE"="gray80"
,"TRUE"="black")
,guide = guide_legend()
)+
scale_shape_manual(labels = c("FALSE"="failed threshold in\nboth conditions"
, "TRUE"="passed threshold in\nat least one condition")
,values=c("FALSE"=16,"TRUE"=1)
,guide = guide_legend()
)+
ggtitle(condition)+
ylim(c(0,max_value))+
xlim(c(0,max_value))+
xlab("receptor in receiving cell type\n[log10 mean expression]")+
ylab("ligand in sending cell type\n[log10 mean expression]")+
geom_vline(xintercept = threshold_log10_meanexpr_per_condition
, color = "red")+
geom_hline(yintercept = threshold_log10_meanexpr_per_condition
, color = "red")+
theme_bw()+
theme(text = element_text(size=20)
,legend.position="bottom"
,legend.title=element_blank()
)
#guides(color = guide_legend(label.position = "bottom")
#       ,shape = guide_legend(label.position = "bottom")
#      )+
# x density plot
xdensity <- ggplot(data = my_df
,aes(x = log10(mean_expr_r_r_active+1)))+
geom_density()+
xlim(c(0,max_value))+
xlab("")+
geom_vline(xintercept = threshold_log10_meanexpr_per_condition
, color = "red")+
theme(text = element_text(size=0))+
ggtitle("")+
theme_bw()+
theme(plot.margin = unit(c(0, 0, 1.8, 0), "cm"))
# Create a blank placeholder plot :
blankPlot <- ggplot(data = df
,aes(x = log10_cum_weight
,y = log10_cum_weight
)
)+
geom_jitter(alpha=0) +
theme(axis.line=element_blank()
,plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
my_l <- list(ydensity=ydensity
,QC_plot=QC_plot
,blankPlot=blankPlot
,xdensity=xdensity
)
})
ggsave(grid.arrange(plot_list[[1]][["ydensity"]]
,plot_list[[1]][["QC_plot"]]
,plot_list[[2]][["ydensity"]]
,plot_list[[2]][["QC_plot"]]
,plot_list[[1]][["blankPlot"]]
,plot_list[[1]][["xdensity"]]
,plot_list[[2]][["blankPlot"]]
,plot_list[[2]][["xdensity"]]
,nrow = 2
,ncol = 4
,widths=c(2, 6, 2, 6)
,heights=c(6.5, 1.5)
,top=textGrob("log10 mean expression in active fraction"
,gp = gpar(fontsize = 24))
), width = 10, height = 8, dpi = 300)
}
interactions <- filterInteractions(comm_result = interactions
,threshold_frac_samples_per_condition = threshold_frac_samples_per_condition
,threshold_log10_cum_weight = threshold_log10_cum_weight
,threshold_log10_meanexpr_per_condition = threshold_log10_meanexpr_per_condition
)
library(grid)
library(gridExtra)
library(gtable)
filterInteractions <- function(comm_result, threshold_log10_cum_weight = 0.05, threshold_frac_samples_per_condition = 0.8,
threshold_log10_meanexpr_per_condition = 0.1, verbose = TRUE) {
# plot the distribution of log10 cumulative interactions weight over the
# fraction of samples in which the interactions is expressed
# calculate log10 cumulative interactions weights
comm_result$anno_interactions$log10_cum_weight <- log10(rowSums(comm_result$weights) + 1)
# identify control samples
idx_control <- comm_result$anno_samples$case_or_control == "control"
idx_case <- comm_result$anno_samples$case_or_control == "case"
# calculate the fraction of samples expressing the interactions
comm_result$anno_interactions$frac_samples_controls <- rowSums(comm_result$weights[,idx_control] != 0) / sum(idx_control)
comm_result$anno_interactions$frac_samples_cases <- rowSums(comm_result$weights[,idx_case] != 0) / sum(idx_case)
# set thresholds
comm_result$thresholds$threshold_log10_cum_weight <- threshold_log10_cum_weight
comm_result$thresholds$threshold_frac_samples_per_condition = threshold_frac_samples_per_condition
comm_result$thresholds$threshold_log10_meanexpr_per_condition = threshold_log10_meanexpr_per_condition
cumW <- plot_cumW(df = comm_result$anno_interactions, threshold_log10_cum_weight = threshold_log10_cum_weight)
fracSamp <- plot_fracSamples(df = comm_result$anno_interactions, threshold_frac_samples_per_condition = threshold_frac_samples_per_condition)
p <- arrangeGrob(fracSamp$ydensity
,fracSamp$QC_plot
,fracSamp$blankPlot
,fracSamp$xdensity
,ncol=2
,nrow=2
,widths=c(2.5, 5.5)
,heights=c(6.5, 1.5)
)
ggsave("above_plot2.png", plot = p, width = 10, height = 8, dpi = 300)
# arrange plots
grid.arrange(cumW
, p
, ncol=2
, widths = c(3.5,4.5)
)
ggsave("above_plot1.png", plot = cumW, width = 10, height = 8, dpi = 300)
plot_meanLig_vs_meanRec(comm_result$anno_interactions, threshold_log10_meanexpr_per_condition = threshold_log10_meanexpr_per_condition)
# filter interactions which did not pass the threshold in any sample
comm_result$anno_interactions$passed_log10_cum_weight_filter <- comm_result$anno_interactions$log10_cum_weight >
threshold_log10_cum_weight
comm_result$anno_interactions$passed_frac_samples_filter <- (comm_result$anno_interactions$frac_samples_controls >
threshold_frac_samples_per_condition) | (comm_result$anno_interactions$frac_samples_cases > threshold_frac_samples_per_condition)
comm_result$anno_interactions$passed_log10_meanexpr_control_filter <- (log10(comm_result$anno_interactions$mean_e_s_l_control +
1) > threshold_log10_meanexpr_per_condition) & (log10(comm_result$anno_interactions$mean_e_r_r_control +
1) > threshold_log10_meanexpr_per_condition)
comm_result$anno_interactions$passed_log10_meanexpr_case_filter <- (log10(comm_result$anno_interactions$mean_e_s_l_case +
1) > threshold_log10_meanexpr_per_condition) & (log10(comm_result$anno_interactions$mean_e_r_r_case +
1) > threshold_log10_meanexpr_per_condition)
comm_result$anno_interactions$passed_log10_meanexpr_per_condition_filter <- comm_result$anno_interactions$passed_log10_meanexpr_control_filter |
comm_result$anno_interactions$passed_log10_meanexpr_case_filter
# filter anno_interactions
comm_result$anno_interactions$passed_QC_filter <- (comm_result$anno_interactions$passed_log10_cum_weight_filter &
comm_result$anno_interactions$passed_frac_samples_filter & comm_result$anno_interactions$passed_log10_meanexpr_per_condition_filter)
samples <- names(comm_result$per_sample_anno_interactions)
if (verbose) {
print(paste(sum(!(comm_result$anno_interactions$passed_log10_cum_weight_filter & comm_result$anno_interactions$passed_frac_samples_filter)),
"out of", nrow(comm_result$weights), "interactions do not pass the thresholds for log10 cumulative interactions weight >",
threshold_log10_cum_weight, "and fraction of expressing samples >", threshold_frac_samples_per_condition,
". Also ", sum(!comm_result$anno_interactions$passed_log10_meanexpr_per_condition_filter),
" interactions didn't pass the discrepancy filter.", " In total,", sum(!comm_result$anno_interactions$passed_QC_filter),
" bad quality interactions will be removed and", sum(comm_result$anno_interactions$passed_QC_filter),
"good quality interactions will remain."))
}
return(comm_result)
}
interactions <- filterInteractions(comm_result = interactions
,threshold_frac_samples_per_condition = threshold_frac_samples_per_condition
,threshold_log10_cum_weight = threshold_log10_cum_weight
,threshold_log10_meanexpr_per_condition = threshold_log10_meanexpr_per_condition
)
comm_result = interactions
,threshold_frac_samples_per_condition = threshold_frac_samples_per_condition
,threshold_log10_cum_weight = threshold_log10_cum_weight
,threshold_log10_meanexpr_per_condition = threshold_log10_meanexpr_per_condition
comm_result = interactions
threshold_frac_samples_per_condition = threshold_frac_samples_per_condition
threshold_log10_cum_weight = threshold_log10_cum_weight
threshold_log10_meanexpr_per_condition = threshold_log10_meanexpr_per_condition
verbose = TRUE
# calculate log10 cumulative interactions weights
comm_result$anno_interactions$log10_cum_weight <- log10(rowSums(comm_result$weights) + 1)
View(comm_result)
# identify control samples
idx_control <- comm_result$anno_samples$case_or_control == "control"
idx_case <- comm_result$anno_samples$case_or_control == "case"
# calculate the fraction of samples expressing the interactions
comm_result$anno_interactions$frac_samples_controls <- rowSums(comm_result$weights[,idx_control] != 0) / sum(idx_control)
comm_result$anno_interactions$frac_samples_cases <- rowSums(comm_result$weights[,idx_case] != 0) / sum(idx_case)
# set thresholds
comm_result$thresholds$threshold_log10_cum_weight <- threshold_log10_cum_weight
comm_result$thresholds$threshold_frac_samples_per_condition = threshold_frac_samples_per_condition
comm_result$thresholds$threshold_log10_meanexpr_per_condition = threshold_log10_meanexpr_per_condition
cumW <- plot_cumW(df = comm_result$anno_interactions, threshold_log10_cum_weight = threshold_log10_cum_weight)
View(cumW)
print(cumW)
fracSamp <- plot_fracSamples(df = comm_result$anno_interactions, threshold_frac_samples_per_condition = threshold_frac_samples_per_condition)
View(fracSamp)
print(fracSamp)
p <- arrangeGrob(fracSamp$ydensity
,fracSamp$QC_plot
,fracSamp$blankPlot
,fracSamp$xdensity
,ncol=2
,nrow=2
,widths=c(2.5, 5.5)
,heights=c(6.5, 1.5)
)
print(p)
View(p)
# arrange plots
grid.arrange(cumW
, p
, ncol=2
, widths = c(3.5,4.5)
)
plot_meanLig_vs_meanRec(comm_result$anno_interactions, threshold_log10_meanexpr_per_condition = threshold_log10_meanexpr_per_condition)
meanLig_vs_meanRec <- plot_meanLig_vs_meanRec(comm_result$anno_interactions, threshold_log10_meanexpr_per_condition = threshold_log10_meanexpr_per_condition)
View(meanLig_vs_meanRec)
ggsave("meanlig-vs-meanrec.png", plot = meanLig_vs_meanRec, width = 10, height = 8, dpi = 300)
sessionInfo()
library(community)
data("LR_database")
getwd()
pacman::p_load("tidyverse", "lubridate", "shiny", "community", "data.table")
# Folder paths
input_dir <- "input_data/"
output_dir <- "computed_results/"
# Set thresholds
threshold_celltype_size <- 6
threshold_nr_active_cells <- 6
threshold_expr <- 0.1
# Database input held as "LR_database"
data("LR_database")
# Load counts
counts <- fread(paste0(input_dir, "counts_lognorm.csv.gz"), header = TRUE)
counts <- as.data.frame(counts)
rownames(counts) <- counts$gene_symbol
counts <- counts[, -1]
# Load cell annotation
anno_cells <- read.table(paste0(input_dir, "anno_cells_norm.txt"),
sep = "\t", header = TRUE)
# Load sample annotation
anno_samples <- read.table(paste0(input_dir, "anno_samples_norm.txt"),
sep = "\t", header = TRUE)
colnames(counts) <- anno_cells$cell_ID
rownames(anno_cells) <- anno_cells$cell_ID
# Renaming the cell_ID.1 column in anno_cells to "cell_ID"
colnames(anno_cells)[colnames(anno_cells) == "cell_ID.1"] <- "cell_ID"
# calculate communication
interactions <- calculate_communication(counts = counts,
anno_samples = anno_samples,
anno_cells = anno_cells,
threshold_celltype_size = threshold_celltype_size,
threshold_nr_active_cells = threshold_nr_active_cells,
threshold_expr = threshold_expr,
lrp_database = LR_database)
# calculate general statistics
interactions <- general_stat(comm_result = interactions, verbose = FALSE)
print(str(interactions))
#print(str(interactions$anno_interactions))
print(str(interactions$anno_interactions))
cat("bad quality")
cat("bad quality <br>", "bad")
cat("bad quality",<br> "bad")
cat("This is line 1<br>This is line 2<br>This is line 3")
cat("This is line 1<br>This is line 2<br>This is line 3")
cat("This is line 1\nThis is line 2\nThis is line 3")
install.packages("bslib")
install.packages("bslib")
install.packages("bslib")
library(community)
data("LR_database")
data <- LR_database[, input$database_columns, drop = FALSE]
default_files$database <- LR_database
database <- LR_database
data <- default_files$database[, c("Pair.Name", "Ligand", "Receptor"), drop = FALSE]
data <- database[, c("Pair.Name", "Ligand", "Receptor"), drop = FALSE]
View(data)
getwd()
setwd("./GitHub/Helmholtz-Workspace/Web-Server/R-Vue/")
library(shinytst)
library(shinytest)
dir()
testApp("scPower_shiny", "mytest")
testApp("scPower_shiny", "mytest")
recordTest("scPower_shiny")
recordTest("scPower_shiny")
recordTest("scPower_shiny")
testApp("scPower_shiny", "mytest.R")
